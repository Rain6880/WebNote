jsp
//动态的响应html页面；
servlet技术：在java代码中嵌入html；

开发动态web工程时Servlet技术 但是缺少：生成html页面是很繁琐；


jsp技术：html输出时比较便捷 就是在html中嵌入java代码


servlet技术：擅长编写java代码
jsp技术：擅长页面显示；

JSP（java Server Pages），中文名叫Java服务器页面；其根本是一个简化的servlet设计；




1.jsp脚本和注释（！！！核心）
1)<%java代码 %>------内部的java代码翻译到service方法的内部
2)<%=java变量或表达式> -----  不加！号翻译到service方法内部out.print()；
3)<%! %>------  加！号翻译到servlet的成员的内容；
jsp注释：
1）html注释：<!--注释内容-->----可见范围jsp源码、翻译后的servlet、页面显示html源码；
2)java注释：//单行注释  /*多行注释*/ -----可见范围  jsp源码 翻译后的servlet
3)jsp注释：<%--注释内容--%>------可见范围jsp源码可见；


2.jsp运行原理-----jsp本质就是servlet(面试)
jsp在第一次被访问时会被Web容器翻译成servlet，在执行过程：
      第一次访问---->helloServlet.jsp---->helloServlet_jsp.java---->编译运行
 PS:被翻译后的servlet在Tomcat的work目录中可以找到




jsp指令（3个）


1）page指令--属性最多的指令（实际开发中page指令默认）
属性最多的一个指令，根据不同的属性，指整个页面特性导
格式：<%@page 属性名 1="属性值1" 属性名2="属性值2"...%>

language:jsp脚本中可以嵌入的语言种类；（写与不写都一样）
pageEncoding：当前jsp文件的本身编码---内部可以包含contentType；
contentType：response.setContentType（text/html;charset=UTF-8)
session：是否jsp在翻译时自动创建session；
<%@page import="java."
import:导入java的包；


errorPage：当当前页面出错后跳转到哪个页面；
isErrorPage:当前页面是一个处理错误的页面；

//在web.xml中设置web应用全局的错误页面；


2)页面包含（静态包含）指令，可以将一个jsp页面包含到另一个2jsp页面中
格式：<%@include file = "被包含的文件地址"%>    //服务器中的地址；


3)taglib指令
在jsp页面中引入标签库（jstl标签库、Struts2标签库）
格式：<%@taglib uri="标签库地址" prefix="前缀"%>




jsp内置/隐式对象（9个）-----笔试

out javax.servlet.jsp.JspWriter      用于页面输出
request javax.servlet.http.HttpServletRequest      得到用户请求信息；
response javax.servlet.http.HttpServletResponse     服务器向客户端的回应信息

config javax.servlet.ServletConfig    服务器配置，可以取得初始化参数
session javax.servlet.http.HttpSession     用来保存用户的信息
application  javax.servlet.ServletContext  所有用户的共享信息

page javax.lang.Object     指当前页面转换后的Servlet类的实例
//pageContext可以获取八大隐式对象；
pageContext   javax.servlet.jsp.PageContext   JSP的页面容器
exception java.lang.Throwable    表示JSP页面所发生的异常，在错误页面中才起作用；


（1）out对象
out的类型：JSPWriter
out作用向客户端输出内容-----out.writer();
out缓冲区默认8kb 可以设置为0 代表关闭out缓冲区 内容直接写在response缓冲区



out缓冲区//buffer="8kb"
response缓冲区
Tomcat引擎默认从response缓冲区获得内容


（2）pageContext 对象
jsp页面的1上下文对象，作用如下：
page对象与pageContext对象不是一回事

1）pageContext是一个域对象；
setAttribute(String name,object obj)
getAttribute(String name)
removeAttribute(String name)


pageContext可以向指定的其他域中存取数据
setAttribute（String name，Object obj,int scope）
getAttribute(String name ,int scope)
removeAttribute(String name,int scope)

//使用pageContext向request域存数据
request.setAttribute("name","zhangsan");
pageContext.setAttribute("name","lisi",PageContext.REQUEST_SCOPE);
pageContext.setAttribute("name","wangwu",PageContext.SESSION_SCOPE);
pageContext.setAttribute("name","xiaoming",PageContext.APPLICATON_SCOPE);//application就是ServletContext；




<!-- findAttribute会从小到大搜索域的范围中的name -->
<%=pageContext.findAttribute("name") %>
<--page域<request域<session域<application域-->


pageContext可以获取八大隐式对象；



重点 四大作用域的总结
page域：当前jsp页面范围
request域：一次请求
session域：一次会话
application域：整个web应用




jsp标签（动作）
1）页面包含（动态包含）：<jsp:include page="被包含的页面"/>
静态包含<%@include file=""%>//起初内容合并在一起

动态包含<jsp:include page="">//编译运行时合并到一起；


2)请求转发：<jsp:forward page="要转发的资源"/>


案例:完成商品列表的展示；

获得数据库中的商品的数据
productServlet
获得商品的数据list<Product>

servlet中获得集合数据怎么交给jsp进行显示
request域
list<Product>


jsp:页面输出方便
地址写Servlet的地址，不写jsp，因为是通过Servlet准备数据


备注：数据库存的是图片的地址；图片存在服务器中；


