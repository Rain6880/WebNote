HttpServletResponse
案例一、完成文件的下载；
案例二、生成验证码（了解--验证码的图片的生成的代码不用写）；
 
Tomcat引擎  会取response缓冲区的内容，与引擎自己添加的信息组装成一个http响应；
request：内部封装请求信息；
response：空对象；
response.getWriter.write("xxx")----response缓冲区
tomcat引擎取出response中的数据；

通过抓包工具抓出http响应；
http响应；
http响应行
http响应头
http响应体；

通过response设置响应行
设置响应行状态码
setStatus（int sc）
手动设置http响应行的转态码
response.setStatus(302);


通过response设置响应头
设置响应头
response.addHeader("name","zhangsan");
response.addIntheader（"age",28）;
Date date = new Date();
response.addDateheader("birthday",data.gettime());

add添加；set设置，后面的会把前面的覆盖掉；
比较重要的：setHeader（String name，String value）；



servlet1没有资源去找servlet2要资源，这个就叫重定向；
特点：1、访问服务器两次；
      2、地址栏的地址已经发生变化；

重定向：状态码：302  响应头：location 代表重订向的地址；

//没有响应 告知客户端去重定向servlet2
//1.设置状态码302
response.setStatus(302);
//2.设置响应头location,
response.setHeader("location","/WEB14/servlet2");

//封装成一个重定向的方法sendRedirect（url）；
response.sendRedirect("/WEB14/servlet2");

拓展，定时刷新：Refresh
//设置定时刷新的头；
response.setheader（"refresh","5;url=://www.baidu.com"）;定时5秒；



通过response设置响应体；
（1）响应体设置文本
PrintWriter.getWriter();

使用utf-8码表；改码表，通知response查询utf-8的码表；
//设置response查询的码表
response.setCharacterEncoding("UTF-8");

客户端默认查询的是jdk编码表；
告知客户端请使用utf-8解码；


//通过一个头Content-Type 告知客户端使用何种码表
response.setHeader("Content-Type","text/html;charset=UTF-8");

简单的方法:reponse.setContentType("text/html;charset=UTF-8");重点、重


//使用response获得字节输出流；
ServletOutputStream stream = response.getOutputstream（）；

//使用response获得字节输出流
ServletOutputStream out = response.getOutputStream();
//获取服务器上的图片
String realPath = this.getServletContext().getRealPath("a.jpg");
InputStream in = new FileInputStream(realPath);

int len = 0;
byte[] buffer = new byte[1024];

while((len=in.read(buffer))>0){
out.write(buffer,0,len);


案例：-完成文件下载；
1）什么情况下会文件下载？
浏览器不能解析的文件就下载


2）什么情况下需要在服务器端编写文件下载的代码？
理论上，浏览器可以解析的代码需要编写文件下载代码。实际开发中，只要是下载的文件都编写文件下载代码；



使用服务器端编码的方式实现文件下载；


//------文件名称是中文的下载---------



//获得要下载得文件的名称
String filename = request.getparameter("filename");
//解决获得中文参数的乱码；下节课讲；
filename = new String（filename.getBytes("ISO8859-1"),"UTF-8");


//获得请求头中的User-Agent
String header = request.getHeader("User-Agent");
//根据不同浏览器进行不同的编码
		String filenameEncoder = "";
		if (agent.contains("MSIE")) {
			// IE浏览器
			filenameEncoder = URLEncoder.encode(filename, "utf-8");
			filenameEncoder = filenameEncoder.replace("+", " ");
		} else if (agent.contains("Firefox")) {
			// 火狐浏览器
			BASE64Encoder base64Encoder = new BASE64Encoder();
			filenameEncoder = "=?utf-8?B?"
					+ base64Encoder.encode(filename.getBytes("utf-8")) + "?=";
		} else {
			// 其它浏览器
			filenameEncoder = URLEncoder.encode(filename, "utf-8");				
		}




//要下载得这个文件的类型-----客户端通过文件的MIME类型去区分类型；
response.setContentType(this.getServletContent().getMimeType(filename));
//告诉客户端该文件不是直接解析，而是以附件形式打开（下载） ,下面的filename为代码固定格式，filename="+filename客户端默认对名字进行解码；
response.setHead("Content-Disposition","attachment;filename="+filenameEncoder）

//获得文件得绝对路径
String path = this.getServletContext().getrealPath("download/"+filename);
//获得该文件的输入流
InputStream in= new FileInputStream（path）；
//获得输出流---通过response获得的输出流 用于向客户端写内容；
ServletOutputStream out = response.getOutputStream():
//文件拷贝的模板代码；
int len = 0；
byte[] buffer = new byte[1024];
while((len=in.read(buffer))>0){
out.write(buffer,0,len);
}
in.close();
//out.close();



response细节点
1)response获得的流不需要手动关闭，Tomcat容器会帮助我们关闭

2）getWriter和getOutputStream不能同时调用
报错：HTTP Status 500 - getWriter（）has already been called for this response；



备注：可以把方法写在doGet（）方法中，在doPost（）方法中调用执行；这样，无论你提交的是post还是get方法都可以执行；




